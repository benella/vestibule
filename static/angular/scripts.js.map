{"version":3,"sources":["node_modules/colorthief/dist/color-thief.js"],"names":[],"mappings":"AAAA;AACA;;AAEA;AACA;AACA;;AAEA,uCAAuC,gBAAgB;AACvD;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,SAAS,sBAAsB;;AAE/B;AACA;AACA,KAAK;AACL;AACA,KAAK;AACL;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,SAAS;AACT,KAAK;AACL;;AAEA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,aAAa;AACb,KAAK;;AAEL;;AAEA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA,aAAa;AACb;AACA;AACA,aAAa;AACb,KAAK;AACL;;AAEA;AACA;AACA;AACA","file":"scripts.js","sourcesContent":["const getPixels = require('get-pixels');\nconst quantize = require('quantize');\n\nfunction createPixelArray(imgData, pixelCount, quality) {\n    const pixels = imgData;\n    const pixelArray = [];\n\n    for (let i = 0, offset, r, g, b, a; i < pixelCount; i = i + quality) {\n        offset = i * 4;\n        r = pixels[offset + 0];\n        g = pixels[offset + 1];\n        b = pixels[offset + 2];\n        a = pixels[offset + 3];\n\n        // If pixel is mostly opaque and not white\n        if (typeof a === 'undefined' || a >= 125) {\n            if (!(r > 250 && g > 250 && b > 250)) {\n                pixelArray.push([r, g, b]);\n            }\n        }\n    }\n    return pixelArray;\n}\n\nfunction validateOptions(options) {\n    let { colorCount, quality } = options;\n\n    if (typeof colorCount === 'undefined' || !Number.isInteger(colorCount)) {\n        colorCount = 10;\n    } else if (colorCount === 1 ) {\n        throw new Error('colorCount should be between 2 and 20. To get one color, call getColor() instead of getPalette()');\n    } else {\n        colorCount = Math.max(colorCount, 2);\n        colorCount = Math.min(colorCount, 20);\n    }\n\n    if (typeof quality === 'undefined' || !Number.isInteger(quality) || quality < 1) {\n        quality = 10;\n    }\n\n    return {\n        colorCount,\n        quality\n    }\n}\n\nfunction loadImg(img) {\n    return new Promise((resolve, reject) => {\n        getPixels(img, function(err, data) {\n            if(err) {\n                reject(err)\n            } else {\n                resolve(data);\n            }\n        })\n    });\n}\n\nfunction getColor(img, quality) {\n    return new Promise((resolve, reject) => {\n        getPalette(img, 5, quality)\n            .then(palette => {\n                resolve(palette[0]);\n            })\n            .catch(err => {\n                reject(err);\n            })\n    });\n\n}\n\nfunction getPalette(img, colorCount = 10, quality = 10) {\n    const options = validateOptions({\n        colorCount,\n        quality\n    });\n\n    return new Promise((resolve, reject) => {\n        loadImg(img)\n            .then(imgData => {\n                const pixelCount = imgData.shape[0] * imgData.shape[1];\n                const pixelArray = createPixelArray(imgData.data, pixelCount, options.quality);\n\n                const cmap = quantize(pixelArray, options.colorCount);\n                const palette = cmap? cmap.palette() : null;\n\n                resolve(palette);\n            })\n            .catch(err => {\n                reject(err);\n            })\n    });\n}\n\nmodule.exports = {\n    getColor,\n    getPalette\n};\n\n"],"sourceRoot":"webpack:///"}